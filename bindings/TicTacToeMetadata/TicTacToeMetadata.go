// This file was generated by seer: https://github.com/G7DAO/seer.
// seer version: 0.3.15
// seer command: seer evm generate --package TicTacToeMetadata --cli --struct TicTacToeMetadata --output bindings/TicTacToeMetadata/TicTacToeMetadata.go
// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package TicTacToeMetadata

import (
	"bytes"
	"crypto/rand"
	"errors"
	"math/big"
	"net/http"
	"strings"

	"context"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/ethereum/go-ethereum/signer/core/apitypes"

	// Reference imports to suppress errors if they are not otherwise used.
	"encoding/hex"
	"encoding/json"
	"fmt"
	"os"
	"time"

	"github.com/G7DAO/seer/bindings/CreateCall"
	"github.com/G7DAO/seer/bindings/GnosisSafe"
	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/spf13/cobra"
	"golang.org/x/term"

	// TicTacToeGame is an auto generated low-level Go binding around an user-defined struct.
	"github.com/ethereum/go-ethereum/common/math"
	"github.com/ethereum/go-ethereum/crypto"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type TicTacToeGame struct {
	Player              common.Address
	Opponent            common.Address
	GameId              *big.Int
	Moves               [3][3]uint8
	MovesLeft           uint8
	OpponentBlockNumber *big.Int
	PlayerBlockNumber   *big.Int
	IsFinished          bool
	Winner              common.Address
}

// TicTacToeMetadataMetaData contains all meta data concerning the TicTacToeMetadata contract.
var TicTacToeMetadataMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint8[3][3]\",\"name\":\"moves\",\"type\":\"uint8[3][3]\"},{\"internalType\":\"uint8\",\"name\":\"movesLeft\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"opponentBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFinished\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"internalType\":\"structTicTacToe.Game\",\"name\":\"gameState\",\"type\":\"tuple\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x6080604052348015600f57600080fd5b5061237d8061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063aa2bf6ec14610030575b600080fd5b61004a60048036038101906100459190610cae565b610060565b6040516100579190610d6c565b60405180910390f35b606060006100a46100808480360381019061007b9190611163565b6102b3565b60405160200161009091906112b1565b60405160208183030381529060405261043d565b6040516020016100b4919061132a565b604051602081830303815290604052905061028c6100d5846040013561046a565b6100e2856040013561046a565b6100fd8660000160208101906100f8919061134c565b610538565b610118876020016020810190610113919061134c565b610538565b876101e001602081019061012c9190611379565b61016b576040518060400160405280600b81526020017f496e2050726f67726573730000000000000000000000000000000000000000008152506101a2565b6040518060400160405280600881526020017f46696e69736865640000000000000000000000000000000000000000000000008152505b600073ffffffffffffffffffffffffffffffffffffffff16896102000160208101906101ce919061134c565b73ffffffffffffffffffffffffffffffffffffffff1603610224576040518060400160405280600481526020017f4e6f6e6500000000000000000000000000000000000000000000000000000000815250610241565b6102408961020001602081019061023b919061134c565b610538565b5b6102608a61018001602081019061025891906113a6565b60ff1661046a565b8860405160200161027898979695949392919061194c565b60405160208183030381529060405261043d565b60405160200161029c9190611ad0565b604051602081830303815290604052915050919050565b606060006040516020016102c690611d78565b604051602081830303815290604052905060005b60038160ff1610156104335760005b60038160ff16101561042557600185606001518360ff166003811061031157610310611db9565b5b60200201518260ff166003811061032b5761032a611db9565b5b602002015160ff160361038857826103616064846103499190611e17565b60ff166064846103599190611e17565b60ff16610867565b604051602001610372929190611e54565b6040516020818303038152906040529250610418565b600285606001518360ff16600381106103a4576103a3611db9565b5b60200201518260ff16600381106103be576103bd611db9565b5b602002015160ff160361041757826103f46064846103dc9190611e17565b60ff166064846103ec9190611e17565b60ff1661093f565b604051602001610405929190611e54565b60405160208183030381529060405292505b5b80806001019150506102e9565b5080806001019150506102da565b5080915050919050565b606061046382604051806060016040528060408152602001612308604091396001610993565b9050919050565b60606000600161047984610b27565b01905060008167ffffffffffffffff81111561049857610497610d93565b5b6040519080825280601f01601f1916602001820160405280156104ca5781602001600182028036833780820191505090505b509050600082602001820190505b60011561052d578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161052157610520611e78565b5b049450600085036104d8575b819350505050919050565b6060600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105ab576040518060400160405280600481526020017f4e6f6e65000000000000000000000000000000000000000000000000000000008152509050610862565b6000602a67ffffffffffffffff8111156105c8576105c7610d93565b5b6040519080825280601f01601f1916602001820160405280156105fa5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061063257610631611db9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061069657610695611db9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006040518060400160405280601081526020017f3031323334353637383961626364656600000000000000000000000000000000815250905060005b601481101561085b57600081601361071a9190611ea7565b60086107269190611edb565b8673ffffffffffffffffffffffffffffffffffffffff16901c90508260048260ff16901c60ff168151811061075e5761075d611db9565b5b602001015160f81c60f81b846002846107779190611edb565b60026107839190611f1d565b8151811061079457610793611db9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f821660ff16815181106107dc576107db611db9565b5b602001015160f81c60f81b8460016002856107f79190611edb565b60026108039190611f1d565b61080d9190611f1d565b8151811061081e5761081d611db9565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350508080600101915050610702565b5081925050505b919050565b606061087e6014846108799190611f1d565b61046a565b61089360148461088e9190611f1d565b61046a565b6108a86050866108a39190611f1d565b61046a565b6108bd6050866108b89190611f1d565b61046a565b6108d26050886108cd9190611f1d565b61046a565b6108e76014886108e29190611f1d565b61046a565b6108fc60148a6108f79190611f1d565b61046a565b61091160508a61090c9190611f1d565b61046a565b6040516020016109289897969594939291906120cd565b604051602081830303815290604052905092915050565b60606109566032846109519190611f1d565b61046a565b61096b6032846109669190611f1d565b61046a565b60405160200161097c929190612291565b604051602081830303815290604052905092915050565b606060008451036109b557604051806020016040528060008152509050610b20565b6000826109e75760036002865160046109ce9190611edb565b6109d89190611f1d565b6109e291906122d6565b610a0e565b6003600286516109f79190611f1d565b610a0191906122d6565b6004610a0d9190611edb565b5b905060008167ffffffffffffffff811115610a2c57610a2b610d93565b5b6040519080825280601f01601f191660200182016040528015610a5e5781602001600182028036833780820191505090505b50905060018501602082018788518901602081018051600082525b82841015610ad4576003840193508351603f8160121c168701518653600186019550603f81600c1c168701518653600186019550603f8160061c168701518653600186019550603f8116870151865360018601955050610a79565b8082528915610b145760038c510660018114610af75760028114610b0a57610b12565b603d6001870353603d6002870353610b12565b603d60018703535b505b50505050505080925050505b9392505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610b85577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610b7b57610b7a611e78565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610bc2576d04ee2d6d415b85acef81000000008381610bb857610bb7611e78565b5b0492506020810190505b662386f26fc100008310610bf157662386f26fc100008381610be757610be6611e78565b5b0492506010810190505b6305f5e1008310610c1a576305f5e1008381610c1057610c0f611e78565b5b0492506008810190505b6127108310610c3f576127108381610c3557610c34611e78565b5b0492506004810190505b60648310610c625760648381610c5857610c57611e78565b5b0492506002810190505b600a8310610c71576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60006102208284031215610ca557610ca4610c89565b5b81905092915050565b60006102208284031215610cc557610cc4610c84565b5b6000610cd384828501610c8e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d16578082015181840152602081019050610cfb565b60008484015250505050565b6000601f19601f8301169050919050565b6000610d3e82610cdc565b610d488185610ce7565b9350610d58818560208601610cf8565b610d6181610d22565b840191505092915050565b60006020820190508181036000830152610d868184610d33565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610dcb82610d22565b810181811067ffffffffffffffff82111715610dea57610de9610d93565b5b80604052505050565b6000610dfd610c7a565b9050610e098282610dc2565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e3982610e0e565b9050919050565b610e4981610e2e565b8114610e5457600080fd5b50565b600081359050610e6681610e40565b92915050565b6000819050919050565b610e7f81610e6c565b8114610e8a57600080fd5b50565b600081359050610e9c81610e76565b92915050565b600080fd5b600067ffffffffffffffff821115610ec257610ec1610d93565b5b602082029050919050565b600080fd5b600067ffffffffffffffff821115610eed57610eec610d93565b5b602082029050919050565b600060ff82169050919050565b610f0e81610ef8565b8114610f1957600080fd5b50565b600081359050610f2b81610f05565b92915050565b6000610f44610f3f84610ed2565b610df3565b90508060208402830185811115610f5e57610f5d610ecd565b5b835b81811015610f875780610f738882610f1c565b845260208401935050602081019050610f60565b5050509392505050565b600082601f830112610fa657610fa5610ea2565b5b6003610fb3848285610f31565b91505092915050565b6000610fcf610fca84610ea7565b610df3565b90508060608402830185811115610fe957610fe8610ecd565b5b835b818110156110125780610ffe8882610f91565b845260208401935050606081019050610feb565b5050509392505050565b600082601f83011261103157611030610ea2565b5b600361103e848285610fbc565b91505092915050565b60008115159050919050565b61105c81611047565b811461106757600080fd5b50565b60008135905061107981611053565b92915050565b6000610220828403121561109657611095610d8e565b5b6110a1610120610df3565b905060006110b184828501610e57565b60008301525060206110c584828501610e57565b60208301525060406110d984828501610e8d565b60408301525060606110ed8482850161101c565b60608301525061018061110284828501610f1c565b6080830152506101a061111784828501610e8d565b60a0830152506101c061112c84828501610e8d565b60c0830152506101e06111418482850161106a565b60e08301525061020061115684828501610e57565b6101008301525092915050565b6000610220828403121561117a57611179610c84565b5b60006111888482850161107f565b91505092915050565b600081905092915050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060008201527f30302f737667222077696474683d2233303022206865696768743d223330302260208201527f207374796c653d226261636b67726f756e643a23666666223e00000000000000604082015250565b600061121e605983611191565b91506112298261119c565b605982019050919050565b600061123f82610cdc565b6112498185611191565b9350611259818560208601610cf8565b80840191505092915050565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b600061129b600683611191565b91506112a682611265565b600682019050919050565b60006112bc82611211565b91506112c88284611234565b91506112d38261128e565b915081905092915050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000600082015250565b6000611314601a83611191565b915061131f826112de565b601a82019050919050565b600061133582611307565b91506113418284611234565b915081905092915050565b60006020828403121561136257611361610c84565b5b600061137084828501610e57565b91505092915050565b60006020828403121561138f5761138e610c84565b5b600061139d8482850161106a565b91505092915050565b6000602082840312156113bc576113bb610c84565b5b60006113ca84828501610f1c565b91505092915050565b7f7b226e616d65223a202247616d65202300000000000000000000000000000000600082015250565b6000611409601083611191565b9150611414826113d3565b601082019050919050565b7f222c20226465736372697074696f6e223a20224f6e2d636861696e205469632060008201527f54616320546f652067616d65222c200000000000000000000000000000000000602082015250565b600061147b602f83611191565b91506114868261141f565b602f82019050919050565b7f2261747472696275746573223a205b0000000000000000000000000000000000600082015250565b60006114c7600f83611191565b91506114d282611491565b600f82019050919050565b7f7b2274726169745f74797065223a202247616d65204944222c202276616c756560008201527f223a202200000000000000000000000000000000000000000000000000000000602082015250565b6000611539602483611191565b9150611544826114dd565b602482019050919050565b7f227d2c2000000000000000000000000000000000000000000000000000000000600082015250565b6000611585600483611191565b91506115908261154f565b600482019050919050565b7f7b2274726169745f74797065223a2022506c61796572222c202276616c75652260008201527f3a20220000000000000000000000000000000000000000000000000000000000602082015250565b60006115f7602383611191565b91506116028261159b565b602382019050919050565b7f7b2274726169745f74797065223a20224f70706f6e656e74222c202276616c7560008201527f65223a2022000000000000000000000000000000000000000000000000000000602082015250565b6000611669602583611191565b91506116748261160d565b602582019050919050565b7f7b2274726169745f74797065223a2022537461747573222c202276616c75652260008201527f3a20220000000000000000000000000000000000000000000000000000000000602082015250565b60006116db602383611191565b91506116e68261167f565b602382019050919050565b7f7b2274726169745f74797065223a202257696e6e6572222c202276616c75652260008201527f3a20220000000000000000000000000000000000000000000000000000000000602082015250565b600061174d602383611191565b9150611758826116f1565b602382019050919050565b7f7b2274726169745f74797065223a20224d6f766573204c656674222c2022766160008201527f6c7565223a200000000000000000000000000000000000000000000000000000602082015250565b60006117bf602683611191565b91506117ca82611763565b602682019050919050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b600061180b600183611191565b9150611816826117d5565b600182019050919050565b7f5d2c200000000000000000000000000000000000000000000000000000000000600082015250565b6000611857600383611191565b915061186282611821565b600382019050919050565b7f22696d616765223a202200000000000000000000000000000000000000000000600082015250565b60006118a3600a83611191565b91506118ae8261186d565b600a82019050919050565b600081519050919050565b600081905092915050565b60006118da826118b9565b6118e481856118c4565b93506118f4818560208601610cf8565b80840191505092915050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b6000611936600283611191565b915061194182611900565b600282019050919050565b6000611957826113fc565b9150611963828b611234565b915061196e8261146e565b9150611979826114ba565b91506119848261152c565b9150611990828a611234565b915061199b82611578565b91506119a6826115ea565b91506119b28289611234565b91506119bd82611578565b91506119c88261165c565b91506119d48288611234565b91506119df82611578565b91506119ea826116ce565b91506119f68287611234565b9150611a0182611578565b9150611a0c82611740565b9150611a188286611234565b9150611a2382611578565b9150611a2e826117b2565b9150611a3a8285611234565b9150611a45826117fe565b9150611a508261184a565b9150611a5b82611896565b9150611a6782846118cf565b9150611a7282611929565b91508190509998505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b6000611aba601d83611191565b9150611ac582611a84565b601d82019050919050565b6000611adb82611aad565b9150611ae78284611234565b915081905092915050565b7f3c7374796c653e2e63656c6c7b7374726f6b653a233030303b7374726f6b652d60008201527f77696474683a323b66696c6c3a6e6f6e653b7d2e787b7374726f6b653a23666660208201527f303030303b7d2e6f7b7374726f6b653a233030303066663b7d3c2f7374796c6560408201527f3e00000000000000000000000000000000000000000000000000000000000000606082015250565b6000611b9a606183611191565b9150611ba582611af2565b606182019050919050565b7f3c7265637420783d223130302220793d2230222077696474683d22322220686560008201527f696768743d22333030222066696c6c3d22626c61636b222f3e00000000000000602082015250565b6000611c0c603983611191565b9150611c1782611bb0565b603982019050919050565b7f3c7265637420783d223230302220793d2230222077696474683d22322220686560008201527f696768743d22333030222066696c6c3d22626c61636b222f3e00000000000000602082015250565b6000611c7e603983611191565b9150611c8982611c22565b603982019050919050565b7f3c7265637420783d22302220793d22313030222077696474683d22333030222060008201527f6865696768743d2232222066696c6c3d22626c61636b222f3e00000000000000602082015250565b6000611cf0603983611191565b9150611cfb82611c94565b603982019050919050565b7f3c7265637420783d22302220793d22323030222077696474683d22333030222060008201527f6865696768743d2232222066696c6c3d22626c61636b222f3e00000000000000602082015250565b6000611d62603983611191565b9150611d6d82611d06565b603982019050919050565b6000611d8382611b8d565b9150611d8e82611bff565b9150611d9982611c71565b9150611da482611ce3565b9150611daf82611d55565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e2282610ef8565b9150611e2d83610ef8565b9250828202611e3b81610ef8565b9150808214611e4d57611e4c611de8565b5b5092915050565b6000611e6082856118cf565b9150611e6c8284611234565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611eb282610e6c565b9150611ebd83610e6c565b9250828203905081811115611ed557611ed4611de8565b5b92915050565b6000611ee682610e6c565b9150611ef183610e6c565b9250828202611eff81610e6c565b91508282048414831517611f1657611f15611de8565b5b5092915050565b6000611f2882610e6c565b9150611f3383610e6c565b9250828201905080821115611f4b57611f4a611de8565b5b92915050565b7f3c6c696e652078313d2200000000000000000000000000000000000000000000600082015250565b6000611f87600a83611191565b9150611f9282611f51565b600a82019050919050565b7f222079313d220000000000000000000000000000000000000000000000000000600082015250565b6000611fd3600683611191565b9150611fde82611f9d565b600682019050919050565b7f222078323d220000000000000000000000000000000000000000000000000000600082015250565b600061201f600683611191565b915061202a82611fe9565b600682019050919050565b7f222079323d220000000000000000000000000000000000000000000000000000600082015250565b600061206b600683611191565b915061207682612035565b600682019050919050565b7f2220636c6173733d2278222f3e00000000000000000000000000000000000000600082015250565b60006120b7600d83611191565b91506120c282612081565b600d82019050919050565b60006120d882611f7a565b91506120e4828b611234565b91506120ef82611fc6565b91506120fb828a611234565b915061210682612012565b91506121128289611234565b915061211d8261205e565b91506121298288611234565b9150612134826120aa565b915061213f82611f7a565b915061214b8287611234565b915061215682611fc6565b91506121628286611234565b915061216d82612012565b91506121798285611234565b91506121848261205e565b91506121908284611234565b915061219b826120aa565b91508190509998505050505050505050565b7f3c636972636c652063783d220000000000000000000000000000000000000000600082015250565b60006121e3600c83611191565b91506121ee826121ad565b600c82019050919050565b7f222063793d220000000000000000000000000000000000000000000000000000600082015250565b600061222f600683611191565b915061223a826121f9565b600682019050919050565b7f2220723d2233302220636c6173733d2263656c6c206f222f3e00000000000000600082015250565b600061227b601983611191565b915061228682612245565b601982019050919050565b600061229c826121d6565b91506122a88285611234565b91506122b382612222565b91506122bf8284611234565b91506122ca8261226e565b91508190509392505050565b60006122e182610e6c565b91506122ec83610e6c565b9250826122fc576122fb611e78565b5b82820490509291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220d64b130e60fe8064c100ce0125876a4973fc99fc0f98dcd983690b7aa45c5bcf64736f6c634300081c0033",
}

// TicTacToeMetadataABI is the input ABI used to generate the binding from.
// Deprecated: Use TicTacToeMetadataMetaData.ABI instead.
var TicTacToeMetadataABI = TicTacToeMetadataMetaData.ABI

// TicTacToeMetadataBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TicTacToeMetadataMetaData.Bin instead.
var TicTacToeMetadataBin = TicTacToeMetadataMetaData.Bin

// DeployTicTacToeMetadata deploys a new Ethereum contract, binding an instance of TicTacToeMetadata to it.
func DeployTicTacToeMetadata(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TicTacToeMetadata, error) {
	parsed, err := TicTacToeMetadataMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TicTacToeMetadataBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TicTacToeMetadata{TicTacToeMetadataCaller: TicTacToeMetadataCaller{contract: contract}, TicTacToeMetadataTransactor: TicTacToeMetadataTransactor{contract: contract}, TicTacToeMetadataFilterer: TicTacToeMetadataFilterer{contract: contract}}, nil
}

// TicTacToeMetadata is an auto generated Go binding around an Ethereum contract.
type TicTacToeMetadata struct {
	TicTacToeMetadataCaller     // Read-only binding to the contract
	TicTacToeMetadataTransactor // Write-only binding to the contract
	TicTacToeMetadataFilterer   // Log filterer for contract events
}

// TicTacToeMetadataCaller is an auto generated read-only Go binding around an Ethereum contract.
type TicTacToeMetadataCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TicTacToeMetadataTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TicTacToeMetadataTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TicTacToeMetadataFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TicTacToeMetadataFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TicTacToeMetadataSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TicTacToeMetadataSession struct {
	Contract     *TicTacToeMetadata // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// TicTacToeMetadataCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TicTacToeMetadataCallerSession struct {
	Contract *TicTacToeMetadataCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// TicTacToeMetadataTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TicTacToeMetadataTransactorSession struct {
	Contract     *TicTacToeMetadataTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// TicTacToeMetadataRaw is an auto generated low-level Go binding around an Ethereum contract.
type TicTacToeMetadataRaw struct {
	Contract *TicTacToeMetadata // Generic contract binding to access the raw methods on
}

// TicTacToeMetadataCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TicTacToeMetadataCallerRaw struct {
	Contract *TicTacToeMetadataCaller // Generic read-only contract binding to access the raw methods on
}

// TicTacToeMetadataTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TicTacToeMetadataTransactorRaw struct {
	Contract *TicTacToeMetadataTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTicTacToeMetadata creates a new instance of TicTacToeMetadata, bound to a specific deployed contract.
func NewTicTacToeMetadata(address common.Address, backend bind.ContractBackend) (*TicTacToeMetadata, error) {
	contract, err := bindTicTacToeMetadata(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TicTacToeMetadata{TicTacToeMetadataCaller: TicTacToeMetadataCaller{contract: contract}, TicTacToeMetadataTransactor: TicTacToeMetadataTransactor{contract: contract}, TicTacToeMetadataFilterer: TicTacToeMetadataFilterer{contract: contract}}, nil
}

// NewTicTacToeMetadataCaller creates a new read-only instance of TicTacToeMetadata, bound to a specific deployed contract.
func NewTicTacToeMetadataCaller(address common.Address, caller bind.ContractCaller) (*TicTacToeMetadataCaller, error) {
	contract, err := bindTicTacToeMetadata(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TicTacToeMetadataCaller{contract: contract}, nil
}

// NewTicTacToeMetadataTransactor creates a new write-only instance of TicTacToeMetadata, bound to a specific deployed contract.
func NewTicTacToeMetadataTransactor(address common.Address, transactor bind.ContractTransactor) (*TicTacToeMetadataTransactor, error) {
	contract, err := bindTicTacToeMetadata(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TicTacToeMetadataTransactor{contract: contract}, nil
}

// NewTicTacToeMetadataFilterer creates a new log filterer instance of TicTacToeMetadata, bound to a specific deployed contract.
func NewTicTacToeMetadataFilterer(address common.Address, filterer bind.ContractFilterer) (*TicTacToeMetadataFilterer, error) {
	contract, err := bindTicTacToeMetadata(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TicTacToeMetadataFilterer{contract: contract}, nil
}

// bindTicTacToeMetadata binds a generic wrapper to an already deployed contract.
func bindTicTacToeMetadata(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TicTacToeMetadataMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TicTacToeMetadata *TicTacToeMetadataRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TicTacToeMetadata.Contract.TicTacToeMetadataCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TicTacToeMetadata *TicTacToeMetadataRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TicTacToeMetadata.Contract.TicTacToeMetadataTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TicTacToeMetadata *TicTacToeMetadataRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TicTacToeMetadata.Contract.TicTacToeMetadataTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TicTacToeMetadata *TicTacToeMetadataCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TicTacToeMetadata.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TicTacToeMetadata *TicTacToeMetadataTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TicTacToeMetadata.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TicTacToeMetadata *TicTacToeMetadataTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TicTacToeMetadata.Contract.contract.Transact(opts, method, params...)
}

// TokenURI is a free data retrieval call binding the contract method 0xaa2bf6ec.
//
// Solidity: function tokenURI((address,address,uint256,uint8[3][3],uint8,uint256,uint256,bool,address) gameState) pure returns(string)
func (_TicTacToeMetadata *TicTacToeMetadataCaller) TokenURI(opts *bind.CallOpts, gameState TicTacToeGame) (string, error) {
	var out []interface{}
	err := _TicTacToeMetadata.contract.Call(opts, &out, "tokenURI", gameState)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xaa2bf6ec.
//
// Solidity: function tokenURI((address,address,uint256,uint8[3][3],uint8,uint256,uint256,bool,address) gameState) pure returns(string)
func (_TicTacToeMetadata *TicTacToeMetadataSession) TokenURI(gameState TicTacToeGame) (string, error) {
	return _TicTacToeMetadata.Contract.TokenURI(&_TicTacToeMetadata.CallOpts, gameState)
}

// TokenURI is a free data retrieval call binding the contract method 0xaa2bf6ec.
//
// Solidity: function tokenURI((address,address,uint256,uint8[3][3],uint8,uint256,uint256,bool,address) gameState) pure returns(string)
func (_TicTacToeMetadata *TicTacToeMetadataCallerSession) TokenURI(gameState TicTacToeGame) (string, error) {
	return _TicTacToeMetadata.Contract.TokenURI(&_TicTacToeMetadata.CallOpts, gameState)
}

func CreateTicTacToeMetadataDeploymentCommand() *cobra.Command {
	var keyfile, nonce, password, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, rpc string
	var gasLimit uint64
	var simulate bool
	var timeout uint
	var safeAddress, safeApi, safeCreateCall, safeSaltRaw, safeNonceRaw string
	var safeOperationType uint8
	var salt [32]byte
	var predictAddress bool
	var safeNonce *big.Int
	var calldata bool

	cmd := &cobra.Command{
		Use:   "deploy",
		Short: "Deploy a new TicTacToeMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {

			if !calldata {
				if keyfile == "" {
					return fmt.Errorf("--keystore not specified (this should be a path to an Ethereum account keystore file)")
				}

				if rpc == "" {
					return fmt.Errorf("--rpc not specified (this should be a URL to an Ethereum JSONRPC API)")
				}
			}

			if safeAddress != "" {
				if !common.IsHexAddress(safeAddress) {
					return fmt.Errorf("--safe is not a valid Ethereum address")
				}
				if safeApi == "" {
					client, clientErr := NewClient(rpc)
					if clientErr != nil {
						return clientErr
					}
					chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
					defer cancelChainIDCtx()
					chainID, chainIDErr := client.ChainID(chainIDCtx)
					if chainIDErr != nil {
						return chainIDErr
					}
					safeApi = fmt.Sprintf("https://safe-client.safe.global/v1/chains/%s/transactions/%s/propose", chainID.String(), safeAddress)
					fmt.Println("--safe-api not specified, using default (", safeApi, ")")
				}

				if safeCreateCall == "" {
					fmt.Println("--safe-create-call not specified, using default (0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4)")
					safeCreateCall = "0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4"
				}
				if !common.IsHexAddress(safeCreateCall) {
					return fmt.Errorf("--safe-create-call is not a valid Ethereum address")
				}

				if SafeOperationType(safeOperationType).String() == "Unknown" {
					return fmt.Errorf("--safe-operation must be 0 (Call) or 1 (DelegateCall)")
				}

				if safeSaltRaw == "" {
					fmt.Println("--safe-salt not specified, generating random salt")
					_, err := rand.Read(salt[:])
					if err != nil {
						return fmt.Errorf("failed to generate random salt: %v", err)
					}
					// prompt user to accept random salt
					fmt.Println("Generated salt:", common.Bytes2Hex(salt[:]))
					fmt.Println("Please check the salt and confirm (y/n)")
					var confirm string
					fmt.Scanln(&confirm)
					if confirm != "y" && confirm != "Y" && confirm != "\n" && confirm != "" {
						return fmt.Errorf("salt not accepted, please specify a valid salt")
					}
				} else {
					copy(salt[:], safeSaltRaw)
				}

				if safeNonceRaw == "" {
					fmt.Println("--safe-nonce not specified, fetching nonce from Safe contract")
				} else {
					safeNonce = new(big.Int)
					_, ok := safeNonce.SetString(safeNonceRaw, 0)
					if !ok {
						return fmt.Errorf("--safe-nonce is not a valid big integer")
					}
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			// Generate deploy bytecode with constructor arguments
			deployCalldata, err := generateTicTacToeMetadataDeployBytecode()
			if err != nil {
				return fmt.Errorf("failed to generate deploy bytecode: %v", err)
			}

			if calldata {
				deployCalldataHex := hex.EncodeToString(deployCalldata)
				cmd.Println(deployCalldataHex)
				return nil
			}

			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			key, keyErr := KeyFromFile(keyfile, password)
			if keyErr != nil {
				return keyErr
			}

			chainIDCtx, cancelChainIDCtx := NewChainContext(timeout)
			defer cancelChainIDCtx()
			chainID, chainIDErr := client.ChainID(chainIDCtx)
			if chainIDErr != nil {
				return chainIDErr
			}

			transactionOpts, transactionOptsErr := bind.NewKeyedTransactorWithChainID(key.PrivateKey, chainID)
			if transactionOptsErr != nil {
				return transactionOptsErr
			}

			SetTransactionParametersFromArgs(transactionOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas, gasLimit, simulate)

			if safeAddress != "" {
				// Create Safe proposal for deployment
				value := transactionOpts.Value
				if value == nil {
					value = big.NewInt(0)
				}

				if predictAddress {
					fmt.Println("Predicting deployment address...")
					from := common.HexToAddress(safeAddress)
					if safeOperationType == 0 {
						from = common.HexToAddress(safeCreateCall)
					}
					deploymentAddress, err := PredictDeploymentAddressSafe(from, salt, deployCalldata)
					if err != nil {
						return fmt.Errorf("failed to predict deployment address: %v", err)
					}
					fmt.Println("Predicted deployment address:", deploymentAddress.Hex())
					return nil
				} else {
					fmt.Println("Creating Safe proposal...")
					err = DeployWithSafe(client, key, common.HexToAddress(safeAddress), common.HexToAddress(safeCreateCall), value, safeApi, deployCalldata, SafeOperationType(safeOperationType), salt, safeNonce)
					if err != nil {
						return fmt.Errorf("failed to create Safe proposal: %v", err)
					}
				}

				return nil
			}

			address, deploymentTransaction, _, deploymentErr := DeployTicTacToeMetadata(
				transactionOpts,
				client,
			)
			if deploymentErr != nil {
				return deploymentErr
			}

			cmd.Printf("Transaction hash: %s\nContract address: %s\n", deploymentTransaction.Hash().Hex(), address.Hex())
			if transactionOpts.NoSend {
				estimationMessage := ethereum.CallMsg{
					From: transactionOpts.From,
					Data: deploymentTransaction.Data(),
				}

				gasEstimationCtx, cancelGasEstimationCtx := NewChainContext(timeout)
				defer cancelGasEstimationCtx()

				gasEstimate, gasEstimateErr := client.EstimateGas(gasEstimationCtx, estimationMessage)
				if gasEstimateErr != nil {
					return gasEstimateErr
				}

				transactionBinary, transactionBinaryErr := deploymentTransaction.MarshalBinary()
				if transactionBinaryErr != nil {
					return transactionBinaryErr
				}
				transactionBinaryHex := hex.EncodeToString(transactionBinary)

				cmd.Printf("Transaction: %s\nEstimated gas: %d\n", transactionBinaryHex, gasEstimate)
			} else {
				cmd.Println("Transaction submitted")
			}

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&keyfile, "keyfile", "", "Path to the keystore file to use for the transaction")
	cmd.Flags().StringVar(&password, "password", "", "Password to use to unlock the keystore (if not specified, you will be prompted for the password when the command executes)")
	cmd.Flags().StringVar(&nonce, "nonce", "", "Nonce to use for the transaction")
	cmd.Flags().StringVar(&value, "value", "", "Value to send with the transaction")
	cmd.Flags().StringVar(&gasPrice, "gas-price", "", "Gas price to use for the transaction")
	cmd.Flags().StringVar(&maxFeePerGas, "max-fee-per-gas", "", "Maximum fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().StringVar(&maxPriorityFeePerGas, "max-priority-fee-per-gas", "", "Maximum priority fee per gas to use for the (EIP-1559) transaction")
	cmd.Flags().Uint64Var(&gasLimit, "gas-limit", 0, "Gas limit for the transaction")
	cmd.Flags().BoolVar(&simulate, "simulate", false, "Simulate the transaction without sending it")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&safeAddress, "safe", "", "Address of the Safe contract")
	cmd.Flags().StringVar(&safeApi, "safe-api", "", "Safe API for the Safe Transaction Service (optional)")
	cmd.Flags().StringVar(&safeCreateCall, "safe-create-call", "", "Address of the CreateCall contract (optional)")
	cmd.Flags().Uint8Var(&safeOperationType, "safe-operation", 1, "Safe operation type: 0 (Call) or 1 (DelegateCall) - default is 1")
	cmd.Flags().StringVar(&safeSaltRaw, "safe-salt", "", "Salt to use for the Safe transaction")
	cmd.Flags().BoolVar(&predictAddress, "safe-predict-address", false, "Predict the deployment address (only works for Safe transactions)")
	cmd.Flags().StringVar(&safeNonceRaw, "safe-nonce", "", "Safe nonce overrider for the transaction (optional)")
	cmd.Flags().BoolVar(&calldata, "calldata", false, "Set this flag if want to return the calldata instead of sending the transaction")

	return cmd
}

func generateTicTacToeMetadataDeployBytecode() ([]byte, error) {
	abiPacked, err := TicTacToeMetadataMetaData.GetAbi()
	if err != nil {
		return nil, fmt.Errorf("failed to get ABI: %v", err)
	}

	constructorArguments, err := abiPacked.Pack("")
	if err != nil {
		return nil, fmt.Errorf("failed to pack constructor arguments: %v", err)
	}

	deployBytecode := append(common.FromHex(TicTacToeMetadataMetaData.Bin), constructorArguments...)
	return deployBytecode, nil
}

func CreateTokenUriCommand() *cobra.Command {
	var contractAddressRaw, rpc string
	var contractAddress common.Address
	var timeout uint

	var blockNumberRaw, fromAddressRaw string
	var pending bool

	var gameState TicTacToeGame
	var gameStateRaw string

	var capture0 string

	cmd := &cobra.Command{
		Use:   "token-uri",
		Short: "Call the TokenURI view method on a TicTacToeMetadata contract",
		PreRunE: func(cmd *cobra.Command, args []string) error {
			if contractAddressRaw == "" {
				return fmt.Errorf("--contract not specified")
			} else if !common.IsHexAddress(contractAddressRaw) {
				return fmt.Errorf("--contract is not a valid Ethereum address")
			}
			contractAddress = common.HexToAddress(contractAddressRaw)

			if gameStateRaw == "" {
				return fmt.Errorf("--game-state argument not specified")
			} else if strings.HasPrefix(gameStateRaw, "@") {
				filename := strings.TrimPrefix(gameStateRaw, "@")
				contents, readErr := os.ReadFile(filename)
				if readErr != nil {
					return readErr
				}
				unmarshalErr := json.Unmarshal(contents, &gameState)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			} else {
				unmarshalErr := json.Unmarshal([]byte(gameStateRaw), &gameState)
				if unmarshalErr != nil {
					return unmarshalErr
				}
			}

			return nil
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			client, clientErr := NewClient(rpc)
			if clientErr != nil {
				return clientErr
			}

			contract, contractErr := NewTicTacToeMetadata(contractAddress, client)
			if contractErr != nil {
				return contractErr
			}

			callOpts := bind.CallOpts{}
			SetCallParametersFromArgs(&callOpts, pending, fromAddressRaw, blockNumberRaw)

			session := TicTacToeMetadataCallerSession{
				Contract: &contract.TicTacToeMetadataCaller,
				CallOpts: callOpts,
			}

			var callErr error
			capture0, callErr = session.TokenURI(
				gameState,
			)
			if callErr != nil {
				return callErr
			}

			cmd.Printf("0: %s\n", capture0)

			return nil
		},
	}

	cmd.Flags().StringVar(&rpc, "rpc", "", "URL of the JSONRPC API to use")
	cmd.Flags().StringVar(&blockNumberRaw, "block", "", "Block number at which to call the view method")
	cmd.Flags().BoolVar(&pending, "pending", false, "Set this flag if it's ok to call the view method against pending state")
	cmd.Flags().UintVar(&timeout, "timeout", 60, "Timeout (in seconds) for interactions with the JSONRPC API")
	cmd.Flags().StringVar(&contractAddressRaw, "contract", "", "Address of the contract to interact with")
	cmd.Flags().StringVar(&fromAddressRaw, "from", "", "Optional address for caller of the view method")

	cmd.Flags().StringVar(&gameStateRaw, "game-state", "", "game-state argument (TicTacToeGame)")

	return cmd
}

var ErrNoRPCURL error = errors.New("no RPC URL provided -- please pass an RPC URL from the command line or set the TIC_TAC_TOE_METADATA_RPC_URL environment variable")

// Generates an Ethereum client to the JSONRPC API at the given URL. If rpcURL is empty, then it
// attempts to read the RPC URL from the TIC_TAC_TOE_METADATA_RPC_URL environment variable. If that is empty,
// too, then it returns an error.
func NewClient(rpcURL string) (*ethclient.Client, error) {
	if rpcURL == "" {
		rpcURL = os.Getenv("TIC_TAC_TOE_METADATA_RPC_URL")
	}

	if rpcURL == "" {
		return nil, ErrNoRPCURL
	}

	client, err := ethclient.Dial(rpcURL)
	return client, err
}

// Creates a new context to be used when interacting with the chain client.
func NewChainContext(timeout uint) (context.Context, context.CancelFunc) {
	baseCtx := context.Background()
	parsedTimeout := time.Duration(timeout) * time.Second
	ctx, cancel := context.WithTimeout(baseCtx, parsedTimeout)
	return ctx, cancel
}

// Unlocks a key from a keystore (byte contents of a keystore file) with the given password.
func UnlockKeystore(keystoreData []byte, password string) (*keystore.Key, error) {
	key, err := keystore.DecryptKey(keystoreData, password)
	return key, err
}

// Loads a key from file, prompting the user for the password if it is not provided as a function argument.
func KeyFromFile(keystoreFile string, password string) (*keystore.Key, error) {
	var emptyKey *keystore.Key
	keystoreContent, readErr := os.ReadFile(keystoreFile)
	if readErr != nil {
		return emptyKey, readErr
	}

	// If password is "", prompt user for password.
	if password == "" {
		fmt.Printf("Please provide a password for keystore (%s): ", keystoreFile)
		passwordRaw, inputErr := term.ReadPassword(int(os.Stdin.Fd()))
		if inputErr != nil {
			return emptyKey, fmt.Errorf("error reading password: %s", inputErr.Error())
		}
		fmt.Print("\n")
		password = string(passwordRaw)
	}

	key, err := UnlockKeystore(keystoreContent, password)
	return key, err
}

// This method is used to set the parameters on a view call from command line arguments (represented mostly as
// strings).
func SetCallParametersFromArgs(opts *bind.CallOpts, pending bool, fromAddress, blockNumber string) {
	if pending {
		opts.Pending = true
	}

	if fromAddress != "" {
		opts.From = common.HexToAddress(fromAddress)
	}

	if blockNumber != "" {
		opts.BlockNumber = new(big.Int)
		opts.BlockNumber.SetString(blockNumber, 0)
	}
}

// This method is used to set the parameters on a transaction from command line arguments (represented mostly as
// strings).
func SetTransactionParametersFromArgs(opts *bind.TransactOpts, nonce, value, gasPrice, maxFeePerGas, maxPriorityFeePerGas string, gasLimit uint64, noSend bool) {
	if nonce != "" {
		opts.Nonce = new(big.Int)
		opts.Nonce.SetString(nonce, 0)
	}

	if value != "" {
		opts.Value = new(big.Int)
		opts.Value.SetString(value, 0)
	}

	if gasPrice != "" {
		opts.GasPrice = new(big.Int)
		opts.GasPrice.SetString(gasPrice, 0)
	}

	if maxFeePerGas != "" {
		opts.GasFeeCap = new(big.Int)
		opts.GasFeeCap.SetString(maxFeePerGas, 0)
	}

	if maxPriorityFeePerGas != "" {
		opts.GasTipCap = new(big.Int)
		opts.GasTipCap.SetString(maxPriorityFeePerGas, 0)
	}

	if gasLimit != 0 {
		opts.GasLimit = gasLimit
	}

	opts.NoSend = noSend
}

func CreateTicTacToeMetadataCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "tic-tac-toe-metadata",
		Short: "Interact with the TicTacToeMetadata contract",
		Run: func(cmd *cobra.Command, args []string) {
			cmd.Help()
		},
	}

	cmd.SetOut(os.Stdout)

	DeployGroup := &cobra.Group{
		ID: "deploy", Title: "Commands which deploy contracts",
	}
	cmd.AddGroup(DeployGroup)
	ViewGroup := &cobra.Group{
		ID: "view", Title: "Commands which view contract state",
	}
	TransactGroup := &cobra.Group{
		ID: "transact", Title: "Commands which submit transactions",
	}
	cmd.AddGroup(ViewGroup, TransactGroup)

	cmdDeployTicTacToeMetadata := CreateTicTacToeMetadataDeploymentCommand()
	cmdDeployTicTacToeMetadata.GroupID = DeployGroup.ID
	cmd.AddCommand(cmdDeployTicTacToeMetadata)

	cmdViewTokenURI := CreateTokenUriCommand()
	cmdViewTokenURI.GroupID = ViewGroup.ID
	cmd.AddCommand(cmdViewTokenURI)

	return cmd
}

// SafeOperationType represents the type of operation for a Safe transaction
type SafeOperationType uint8

const (
	Call         SafeOperationType = 0
	DelegateCall SafeOperationType = 1
)

// String returns the string representation of the SafeOperationType
func (o SafeOperationType) String() string {
	switch o {
	case Call:
		return "Call"
	case DelegateCall:
		return "DelegateCall"
	default:
		return "Unknown"
	}
}

// SafeTransactionData represents the data for a Safe transaction
type SafeTransactionData struct {
	To             string            `json:"to"`
	Value          string            `json:"value"`
	Data           string            `json:"data"`
	Operation      SafeOperationType `json:"operation"`
	SafeTxGas      uint64            `json:"safeTxGas"`
	BaseGas        uint64            `json:"baseGas"`
	GasPrice       string            `json:"gasPrice"`
	GasToken       string            `json:"gasToken"`
	RefundReceiver string            `json:"refundReceiver"`
	Nonce          *big.Int          `json:"nonce"`
	SafeTxHash     string            `json:"safeTxHash"`
	Sender         string            `json:"sender"`
	Signature      string            `json:"signature"`
	Origin         string            `json:"origin"`
}

const (
	NativeTokenAddress = "0x0000000000000000000000000000000000000000"
)

func DeployWithSafe(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, factoryAddress common.Address, value *big.Int, safeApi string, deployBytecode []byte, safeOperationType SafeOperationType, salt [32]byte, safeNonce *big.Int) error {
	abi, err := CreateCall.CreateCallMetaData.GetAbi()
	if err != nil {
		return fmt.Errorf("failed to get ABI: %v", err)
	}

	safeCreateCallTxData, err := abi.Pack("performCreate2", value, deployBytecode, salt)
	if err != nil {
		return fmt.Errorf("failed to pack performCreate2 transaction: %v", err)
	}

	return CreateSafeProposal(client, key, safeAddress, factoryAddress, safeCreateCallTxData, value, safeApi, SafeOperationType(safeOperationType), safeNonce)
}

func PredictDeploymentAddressSafe(from common.Address, salt [32]byte, deployBytecode []byte) (common.Address, error) {
	// Calculate the hash of the init code (deployment bytecode)
	initCodeHash := crypto.Keccak256(deployBytecode)

	// Calculate the CREATE2 address
	deployedAddress := crypto.CreateAddress2(from, salt, initCodeHash)

	return deployedAddress, nil
}

func CreateSafeProposal(client *ethclient.Client, key *keystore.Key, safeAddress common.Address, to common.Address, data []byte, value *big.Int, safeApi string, safeOperationType SafeOperationType, safeNonce *big.Int) error {
	chainID, err := client.ChainID(context.Background())
	if err != nil {
		return fmt.Errorf("failed to get chain ID: %v", err)
	}

	// Create a new instance of the GnosisSafe contract
	safeInstance, err := GnosisSafe.NewGnosisSafe(safeAddress, client)
	if err != nil {
		return fmt.Errorf("failed to create GnosisSafe instance: %v", err)
	}

	nonce := safeNonce
	if safeNonce == nil {
		// Fetch the current nonce from the Safe contract
		fetchedNonce, err := safeInstance.Nonce(&bind.CallOpts{})
		if err != nil {
			return fmt.Errorf("failed to fetch nonce from Safe contract: %v", err)
		}
		nonce = fetchedNonce
	} else {
		nonce = safeNonce
	}

	safeTransactionData := SafeTransactionData{
		To:             to.Hex(),
		Value:          value.String(),
		Data:           common.Bytes2Hex(data),
		Operation:      safeOperationType,
		SafeTxGas:      0,
		BaseGas:        0,
		GasPrice:       "0",
		GasToken:       NativeTokenAddress,
		RefundReceiver: NativeTokenAddress,
		Nonce:          nonce,
	}

	// Calculate SafeTxHash
	safeTxHash, err := CalculateSafeTxHash(safeAddress, safeTransactionData, chainID)
	if err != nil {
		return fmt.Errorf("failed to calculate SafeTxHash: %v", err)
	}

	// Sign the SafeTxHash
	signature, err := crypto.Sign(safeTxHash.Bytes(), key.PrivateKey)
	if err != nil {
		return fmt.Errorf("failed to sign SafeTxHash: %v", err)
	}

	// Adjust V value for Ethereum's replay protection
	signature[64] += 27

	// Convert signature to hex
	senderSignature := "0x" + common.Bytes2Hex(signature)

	// Prepare the request body
	requestBody := map[string]interface{}{
		"to":             safeTransactionData.To,
		"value":          safeTransactionData.Value,
		"data":           "0x" + safeTransactionData.Data,
		"operation":      int(safeTransactionData.Operation),
		"safeTxGas":      fmt.Sprintf("%d", safeTransactionData.SafeTxGas),
		"baseGas":        fmt.Sprintf("%d", safeTransactionData.BaseGas),
		"gasPrice":       safeTransactionData.GasPrice,
		"gasToken":       safeTransactionData.GasToken,
		"refundReceiver": safeTransactionData.RefundReceiver,
		"nonce":          fmt.Sprintf("%d", safeTransactionData.Nonce),
		"safeTxHash":     safeTxHash.Hex(),
		"sender":         key.Address.Hex(),
		"signature":      senderSignature,
		"origin":         fmt.Sprintf("{\"url\":\"%s\",\"name\":\"TokenSender Deployment\"}", safeApi),
	}

	// Marshal the request body to JSON
	jsonBody, err := json.Marshal(requestBody)
	if err != nil {
		return fmt.Errorf("failed to marshal request body: %v", err)
	}

	// Send the request to the Safe Transaction Service
	req, err := http.NewRequest("POST", safeApi, bytes.NewBuffer(jsonBody))
	if err != nil {
		return fmt.Errorf("failed to create request: %v", err)
	}

	req.Header.Set("Content-Type", "application/json")

	httpClient := &http.Client{}
	resp, err := httpClient.Do(req)
	if err != nil {
		return fmt.Errorf("failed to send request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK && resp.StatusCode != http.StatusCreated {
		return fmt.Errorf("unexpected status code: %d", resp.StatusCode)
	}

	fmt.Println("Safe proposal created successfully")
	return nil
}

func CalculateSafeTxHash(safeAddress common.Address, txData SafeTransactionData, chainID *big.Int) (common.Hash, error) {
	domainSeparator := apitypes.TypedDataDomain{
		ChainId:           (*math.HexOrDecimal256)(chainID),
		VerifyingContract: safeAddress.Hex(),
	}

	typedData := apitypes.TypedData{
		Types: apitypes.Types{
			"EIP712Domain": []apitypes.Type{
				{Name: "chainId", Type: "uint256"},
				{Name: "verifyingContract", Type: "address"},
			},
			"SafeTx": []apitypes.Type{
				{Name: "to", Type: "address"},
				{Name: "value", Type: "uint256"},
				{Name: "data", Type: "bytes"},
				{Name: "operation", Type: "uint8"},
				{Name: "safeTxGas", Type: "uint256"},
				{Name: "baseGas", Type: "uint256"},
				{Name: "gasPrice", Type: "uint256"},
				{Name: "gasToken", Type: "address"},
				{Name: "refundReceiver", Type: "address"},
				{Name: "nonce", Type: "uint256"},
			},
		},
		Domain:      domainSeparator,
		PrimaryType: "SafeTx",
		Message: apitypes.TypedDataMessage{
			"to":             txData.To,
			"value":          txData.Value,
			"data":           "0x" + txData.Data,
			"operation":      fmt.Sprintf("%d", txData.Operation),
			"safeTxGas":      fmt.Sprintf("%d", txData.SafeTxGas),
			"baseGas":        fmt.Sprintf("%d", txData.BaseGas),
			"gasPrice":       txData.GasPrice,
			"gasToken":       txData.GasToken,
			"refundReceiver": txData.RefundReceiver,
			"nonce":          fmt.Sprintf("%d", txData.Nonce),
		},
	}

	typedDataHash, _, err := apitypes.TypedDataAndHash(typedData)
	if err != nil {
		return common.Hash{}, fmt.Errorf("failed to hash typed data: %v", err)
	}

	return common.BytesToHash(typedDataHash), nil
}
